#!/system/bin/bash
config_file="/sdcard/XtremeBS/XtremeBS.conf"
declare -a hp_cpus
declare -a lp_cpus
declare -a lp_govs
cpu_base_path="/sys/devices/system/cpu"

auto_detect_cpus() {
declare -a cpus
declare -a cpu_freqs
for cpu in $(ls "$cpu_base_path"/ | grep cpu[00-99]); do
  cpus+=( "$cpu" )
  cpu_freqs+=( "$(cat /sys/devices/system/cpu/$cpu/cpufreq/cpuinfo_max_freq)" )
done

for high_freq in $(echo "${cpu_freqs[@]}" | tr ' ' '\n' | uniq -u); do
  for index in "${!cpu_freqs[@]}"; do
    if [ "${cpu_freqs[$index]}" = "$high_freq" ]; then
      hp_cpus+=( "${cpus[$index]}" )
    else
      if grep -q " powersave " "$cpu_base_path/${cpus[$index]}/cpufreq/scaling_available_governors"; then
        lp_govs+=( "$(cat $cpu_base_path/${cpus[$index]}/cpufreq/scaling_governor)" )
        lp_cpus+=( "${cpus[$index]}" )
      fi
    fi
  done
done
}

get_config() {
  grep "^$1=" "$config_file" | cut -d'=' -f2-
}

notif() {
  su -lp 2000 -c "cmd notification post -S bigtext -t 'XtremeBS' 'STATUS' \"$1\"" >/dev/null
}

enable_pwr_save() {
  lock="1"
  echo -n "Enabling XtremeBS"
  notif "Enabling XtremeBS..."
  # Handle Cores
  if [ "$handle_cores" != "false" ]; then
    magic_remount_rw &>/dev/null
    for cpu in ${hp_cpus[@]}; do
      echo "0" > "$cpu_base_path/$cpu/online"
    done
    for cpu in ${lp_cpus[@]}; do
      echo "powersave" > "$cpu_base_path/$cpu/cpufreq/scaling_governor"
    done
    magic_remount_ro &>/dev/null
  fi

  # Handle Apps
  if [ "$handle_apps" != "false" ]; then
    for app in $(pm list packages -3 | cut -d: -f2- && [ -s "$denylist" ] && cat "$denylist"); do
      if grep -q -E "$app" "$allowlist"; then
        continue
      fi
      if [ "$handle_apps" = "nice" ]; then
        for i in $(pgrep "$app"); do
          renice -n 19 "$i" &>/dev/null &
        done
      elif [ "$handle_apps" = "kill" ]; then
        am force-stop "$app" &>/dev/null &
      else
        am force-stop "$app" &>/dev/null &
        pm suspend "$app" &>/dev/null &
      fi
    done
  fi

  # Handle GMS
  if [ "$handle_gms" = "nice" ]; then
    renice -n 19 com.google.android.gms
  elif [ "$handle_gms" = "kill" ]; then
    pm disable com.google.android.gms
    am force-stop com.google.android.gms
  else
    : # Do nothing
  fi
  # Handle processes
  if [ "$handle_proc" = "true" ]; then
    for proc in $(cat "$proc_file"); do
      renice -n 10 $(pgrep "$proc")
    done
  fi
  # Low RAM
  if [ "$low_ram" = "true" ]; then
    resetprop -n ro.config.low_ram true
  fi

  echo " - [done]"
  notif "status: Enabled"
}

disable_pwr_save() {
  echo -n "Disabling XtremeBS"
  notif "Disabling XtremeBS..."
  if [ "$handle_cores" != "false" ]; then
    magic_remount_rw &>/dev/null
    for cpu in ${hp_cpus[@]}; do
      echo "1" > "$cpu_base_path/$cpu/online"
    done
    for index in ${!lp_cpus[@]}; do
      echo "${lp_govs[$index]}" > "$cpu_base_path/${lp_cpus[$index]}/cpufreq/scaling_governor"
    done
    magic_remount_ro &>/dev/null
  fi
  # Handle Apps
  if [ "$handle_apps" != "false" ]; then
    for app in $(pm list packages -3 | cut -d: -f2- && [ -s "$denylist" ] && cat "$denylist"); do
      if grep -q -E "$app" "$allowlist"; then
        continue
      fi
      if [ "$handle_apps" = "nice" ]; then
        for i in $(pgrep "$app"); do
          renice -n 0 "$i" &>/dev/null &
        done
      else
        pm unsuspend "$app" &>/dev/null &
      fi
    done
  fi

  # Handle GMS
  if [ "$handle_gms" = "nice" ]; then
    renice -n 0 com.google.android.gms
  elif [ "$handle_gms" = "kill" ]; then
    pm enable com.google.android.gms
  else
    : # Do nothing
  fi
  # Handle Processes
  if [ "$handle_proc" = "true" ]; then
    for proc in $(cat "$proc_file"); do
      renice -n 0 $(pgrep "$proc")
    done
  fi
  # Low RAM
  if [ "$low_ram" = "true" ]; then
    resetprop -n ro.config.low_ram false
  fi

  lock="0"
  echo " - [done]"
  notif "status: Disabled"
}


read_config() {
  # unset arrays
  unset cpus
  unset lp_cpus
  unset hp_cpus
  unset lp_govs
  unset cpu_freqs

  # Read config

  # delay in seconds
  delay=$(get_config "delay")
  delay="${delay:-3}"

  # trigger
  # auto|boot # <integer>
  trigger=$(get_config "trigger")
  [ -z "$trigger" ] && exit

  # handle_apps
  # false|kill|nice|suspend
  handle_apps=$(get_config "handle_apps")
  handle_apps="${handle_apps:-false}"

  # allowlist (user apps)
  # a path /sdcard/XtremeBS/apps.allow
  allowlist=$(get_config "allowlist")
  allowlist="${allowlist:-/sdcard/XtremeBS/apps.allow}"

  # sanity check. Not allow user to suspend
  # everything without an allowlist. Will make
  # all apps unusable. Set handle_apps=false
  # and notify user
  [ ! -s "$allowlist" ] && [ "$handle_apps" = "suspend" ] && handle_apps="false" && notif "Alert!\nYou MUST have an allowlist!\nWill not suspend apps without one!"

  # denylist (system apps)
  # a path /sdcard/XtremeBS/apps.deny
  denylist=$(get_config "denylist")
  denylist="${denylist:-/sdcard/XtremeBS/apps.deny}"

  # handle_cores
  # auto|false|"cpu4 cpu5"
  handle_cores=$(get_config "handle_cores")
  handle_cores="${handle_cores:-false}"

  # disable_cores
  # false|auto|"cpu6 cpu7"
  disable_cores=$(get_config "disable_cores")
  disable_cores="${disable_cores:-false}"

  # handle_gms
  # false|kill|nice
  handle_gms=$(get_config "handle_gms")
  handle_gms="${handle_gms:-false}"

  # handle_proc
  # true|false
  handle_proc=$(get_config "handle_proc")
  handle_proc="${handle_proc:-false}"

  # proc_file
  # a path /sdcard/XtremeBS/proc.list
  proc_file=$(get_config "proc_file")
  [ ! -s "$proc_file" ] && handle_proc="false"

  # set low_ram
  # true|false
  low_ram=$(get_config "low_ram")
  low_ram="${low_ram:-true}"

  # Handle Disable Cores
  if [ "$disable_cores" = "false" ]; then
    : # Do nothing
  elif [ "$disable_cores" = "auto" ]; then
    # Handle Auto
    declare -a cpus
    declare -a cpu_freqs
    for cpu in $(ls "$cpu_base_path/" | grep cpu[00-99]); do
      cpus+=( "$cpu" )
      cpu_freqs+=( "$(cat $cpu_base_path/$cpu/cpufreq/cpuinfo_max_freq)" )
    done
    for high_freq in $(echo "${cpu_freqs[@]}" | tr ' ' '\n' | uniq -u); do
      for index in "${!cpu_freqs[@]}"; do
        if [ "${cpu_freqs[$index]}" = "$high_freq" ]; then
          hp_cpus+=( "${cpus[$index]}" )
        fi
      done
    done
  else
    # Handle Manual
    for core in $disable_cores; do
      [ -d "$cpu_base_path/$core" ] && hp_cpus+=( "$core" )
    done
  fi

  # Handle powersave on cores
  if [ "$handle_cores" = "false" ]; then
    : # Do nothing
  elif [ "$handle_cores" = "auto" ]; then
    # Handle Auto
    for core in $(ls "$cpu_base_path/" | grep cpu[00-99]); do
      match="false"
      for hp_core in ${hp_cpus[@]}; do
        [ "$core" = "$hp_core" ] && match="true"
      done
      if [ "$match" = "false" ] && grep -q " powersave " "$cpu_base_path/$core/cpufreq/scaling_available_governors"; then
        lp_govs+=( "$(cat $cpu_base_path/$core/cpufreq/scaling_governor)" )
        lp_cpus+=( "$core" )
      fi
    done
  else
    # Handle Manual
    for core in $handle_cores; do
      if [ -d "$cpu_base_path/$core" ] && grep -q " powersave " "$cpu_base_path/$core/cpufreq/scaling_available_governors"; then
        lp_govs+=( "$(cat $cpu_base_path/$core/cpufreq/scaling_governor)" )
        lp_cpus+=( "$core" )
      fi
    done
  fi

  # May need this later
#  percent="$(dumpsys battery | grep level | cut -d' ' -f4)"

}

init() {
  ctl_file="/data/local/tmp/xbs"
  read_config
  while true; do
    # Check for command
      cmd="$(cat $ctl_file)"
      echo > "$ctl_file"
      case cmd in
        reload)
          if [ "$lock" = "0" ]; then
            read_config
          else
            disable_pwr_save
            read_config
            enable_pwr_save
          fi ;;
        stop) [ "$lock" = "1" ] && disable_pwr_save ;;
        start) [ "$lock" = "0" ] && enable_pwr_save ;;
        pause)
          until [ "$resume" = "resume" ]; do
            sleep "$delay"
            resume="$(cat $ctl_file)"
          done ;;
        safe)
          disable_pwr_save
          notif "Safe Mode is Active"
          until [ "$ready" = "resume" ]; do
            ready="$(cat $ctl_file)"
          done && read_config ;;
        *) : ;;
      esac

    # Check for trigger
    if [ "$trigger" = "boot" ]; then
      enable_pwr_save
    elif [ "$trigger" = "auto" ]; then
      if [ "$(settings get global low_power)" = "1" ] && [ "$lock" = "0" ]; then
        enable_pwr_save
      else
        disable_pwr_save
      fi
    else
      : # Do nothing
    fi

    # Wait
    sleep "$delay"
  done
}

# START

[ ! -d /sdcard/XtremeBS/ ] && mkdir /sdcard/XtremeBS/

if [ ! -s "$config_file" ]; then
  cat << EOF > "$config_file"
# trigger
# auto|boot
trigger=auto

# delay
# time in seconds
delay=3

# handle_cores
# auto|false|"cpu4 cpu5"
handle_cores=auto

# disable_cores
# false|auto|"cpu6 cpu7"
disable_cores=false

# handle_apps
# false|kill|nice|suspend
handle_apps=nice

# allowlist (user apps)
# a path /sdcard/XtremeBS/apps.allow
allowlist=/sdcard/XtremeBS/apps.allow

# denylist (system apps (and processes if using nice))
# a path /sdcard/XtremeBS/apps.deny
denylist=/sdcard/XtremeBS/apps.deny

# handle_gms
# false|kill|nice
handle_gms=nice

# handle_proc
# true|false
handle_proc=false

# process list
# a path /sdcard/XtremeBS/proc.list
proc_file=/sdcard/XtremeBS/proc.list

# low_ram
# true|false
low_ram=true

EOF

fi

init
